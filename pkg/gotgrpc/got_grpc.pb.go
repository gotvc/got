// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: got.proto

package gotgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpaceClient is the client API for Space service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceClient interface {
	CreateBranch(ctx context.Context, in *CreateBranchReq, opts ...grpc.CallOption) (*BranchInfo, error)
	GetBranch(ctx context.Context, in *GetBranchReq, opts ...grpc.CallOption) (*BranchInfo, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchReq, opts ...grpc.CallOption) (*DeleteBranchRes, error)
	ListBranch(ctx context.Context, in *ListBranchReq, opts ...grpc.CallOption) (*ListBranchRes, error)
	SetBranch(ctx context.Context, in *SetBranchReq, opts ...grpc.CallOption) (*BranchInfo, error)
	PostBlob(ctx context.Context, in *PostBlobReq, opts ...grpc.CallOption) (*PostBlobRes, error)
	GetBlob(ctx context.Context, in *GetBlobReq, opts ...grpc.CallOption) (*GetBlobRes, error)
	DeleteBlob(ctx context.Context, in *DeleteBlobReq, opts ...grpc.CallOption) (*DeleteBlobRes, error)
	AddBlob(ctx context.Context, in *AddBlobReq, opts ...grpc.CallOption) (*AddBlobRes, error)
	ListBlob(ctx context.Context, in *ListBlobReq, opts ...grpc.CallOption) (*ListBlobRes, error)
	ReadCell(ctx context.Context, in *ReadCellReq, opts ...grpc.CallOption) (*ReadCellRes, error)
	CASCell(ctx context.Context, in *CASCellReq, opts ...grpc.CallOption) (*CASCellRes, error)
}

type spaceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceClient(cc grpc.ClientConnInterface) SpaceClient {
	return &spaceClient{cc}
}

func (c *spaceClient) CreateBranch(ctx context.Context, in *CreateBranchReq, opts ...grpc.CallOption) (*BranchInfo, error) {
	out := new(BranchInfo)
	err := c.cc.Invoke(ctx, "/got.Space/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetBranch(ctx context.Context, in *GetBranchReq, opts ...grpc.CallOption) (*BranchInfo, error) {
	out := new(BranchInfo)
	err := c.cc.Invoke(ctx, "/got.Space/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DeleteBranch(ctx context.Context, in *DeleteBranchReq, opts ...grpc.CallOption) (*DeleteBranchRes, error) {
	out := new(DeleteBranchRes)
	err := c.cc.Invoke(ctx, "/got.Space/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ListBranch(ctx context.Context, in *ListBranchReq, opts ...grpc.CallOption) (*ListBranchRes, error) {
	out := new(ListBranchRes)
	err := c.cc.Invoke(ctx, "/got.Space/ListBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SetBranch(ctx context.Context, in *SetBranchReq, opts ...grpc.CallOption) (*BranchInfo, error) {
	out := new(BranchInfo)
	err := c.cc.Invoke(ctx, "/got.Space/SetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) PostBlob(ctx context.Context, in *PostBlobReq, opts ...grpc.CallOption) (*PostBlobRes, error) {
	out := new(PostBlobRes)
	err := c.cc.Invoke(ctx, "/got.Space/PostBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetBlob(ctx context.Context, in *GetBlobReq, opts ...grpc.CallOption) (*GetBlobRes, error) {
	out := new(GetBlobRes)
	err := c.cc.Invoke(ctx, "/got.Space/GetBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DeleteBlob(ctx context.Context, in *DeleteBlobReq, opts ...grpc.CallOption) (*DeleteBlobRes, error) {
	out := new(DeleteBlobRes)
	err := c.cc.Invoke(ctx, "/got.Space/DeleteBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AddBlob(ctx context.Context, in *AddBlobReq, opts ...grpc.CallOption) (*AddBlobRes, error) {
	out := new(AddBlobRes)
	err := c.cc.Invoke(ctx, "/got.Space/AddBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ListBlob(ctx context.Context, in *ListBlobReq, opts ...grpc.CallOption) (*ListBlobRes, error) {
	out := new(ListBlobRes)
	err := c.cc.Invoke(ctx, "/got.Space/ListBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ReadCell(ctx context.Context, in *ReadCellReq, opts ...grpc.CallOption) (*ReadCellRes, error) {
	out := new(ReadCellRes)
	err := c.cc.Invoke(ctx, "/got.Space/ReadCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) CASCell(ctx context.Context, in *CASCellReq, opts ...grpc.CallOption) (*CASCellRes, error) {
	out := new(CASCellRes)
	err := c.cc.Invoke(ctx, "/got.Space/CASCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceServer is the server API for Space service.
// All implementations must embed UnimplementedSpaceServer
// for forward compatibility
type SpaceServer interface {
	CreateBranch(context.Context, *CreateBranchReq) (*BranchInfo, error)
	GetBranch(context.Context, *GetBranchReq) (*BranchInfo, error)
	DeleteBranch(context.Context, *DeleteBranchReq) (*DeleteBranchRes, error)
	ListBranch(context.Context, *ListBranchReq) (*ListBranchRes, error)
	SetBranch(context.Context, *SetBranchReq) (*BranchInfo, error)
	PostBlob(context.Context, *PostBlobReq) (*PostBlobRes, error)
	GetBlob(context.Context, *GetBlobReq) (*GetBlobRes, error)
	DeleteBlob(context.Context, *DeleteBlobReq) (*DeleteBlobRes, error)
	AddBlob(context.Context, *AddBlobReq) (*AddBlobRes, error)
	ListBlob(context.Context, *ListBlobReq) (*ListBlobRes, error)
	ReadCell(context.Context, *ReadCellReq) (*ReadCellRes, error)
	CASCell(context.Context, *CASCellReq) (*CASCellRes, error)
	mustEmbedUnimplementedSpaceServer()
}

// UnimplementedSpaceServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceServer struct {
}

func (UnimplementedSpaceServer) CreateBranch(context.Context, *CreateBranchReq) (*BranchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedSpaceServer) GetBranch(context.Context, *GetBranchReq) (*BranchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedSpaceServer) DeleteBranch(context.Context, *DeleteBranchReq) (*DeleteBranchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (UnimplementedSpaceServer) ListBranch(context.Context, *ListBranchReq) (*ListBranchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranch not implemented")
}
func (UnimplementedSpaceServer) SetBranch(context.Context, *SetBranchReq) (*BranchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBranch not implemented")
}
func (UnimplementedSpaceServer) PostBlob(context.Context, *PostBlobReq) (*PostBlobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBlob not implemented")
}
func (UnimplementedSpaceServer) GetBlob(context.Context, *GetBlobReq) (*GetBlobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedSpaceServer) DeleteBlob(context.Context, *DeleteBlobReq) (*DeleteBlobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlob not implemented")
}
func (UnimplementedSpaceServer) AddBlob(context.Context, *AddBlobReq) (*AddBlobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlob not implemented")
}
func (UnimplementedSpaceServer) ListBlob(context.Context, *ListBlobReq) (*ListBlobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlob not implemented")
}
func (UnimplementedSpaceServer) ReadCell(context.Context, *ReadCellReq) (*ReadCellRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCell not implemented")
}
func (UnimplementedSpaceServer) CASCell(context.Context, *CASCellReq) (*CASCellRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CASCell not implemented")
}
func (UnimplementedSpaceServer) mustEmbedUnimplementedSpaceServer() {}

// UnsafeSpaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceServer will
// result in compilation errors.
type UnsafeSpaceServer interface {
	mustEmbedUnimplementedSpaceServer()
}

func RegisterSpaceServer(s grpc.ServiceRegistrar, srv SpaceServer) {
	s.RegisterService(&Space_ServiceDesc, srv)
}

func _Space_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CreateBranch(ctx, req.(*CreateBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetBranch(ctx, req.(*GetBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DeleteBranch(ctx, req.(*DeleteBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ListBranch(ctx, req.(*ListBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/SetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SetBranch(ctx, req.(*SetBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_PostBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBlobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).PostBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/PostBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).PostBlob(ctx, req.(*PostBlobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/GetBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetBlob(ctx, req.(*GetBlobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DeleteBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DeleteBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/DeleteBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DeleteBlob(ctx, req.(*DeleteBlobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AddBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AddBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/AddBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AddBlob(ctx, req.(*AddBlobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ListBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ListBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/ListBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ListBlob(ctx, req.(*ListBlobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ReadCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ReadCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/ReadCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ReadCell(ctx, req.(*ReadCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_CASCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CASCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CASCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/got.Space/CASCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CASCell(ctx, req.(*CASCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Space_ServiceDesc is the grpc.ServiceDesc for Space service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Space_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "got.Space",
	HandlerType: (*SpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBranch",
			Handler:    _Space_CreateBranch_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _Space_GetBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _Space_DeleteBranch_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _Space_ListBranch_Handler,
		},
		{
			MethodName: "SetBranch",
			Handler:    _Space_SetBranch_Handler,
		},
		{
			MethodName: "PostBlob",
			Handler:    _Space_PostBlob_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _Space_GetBlob_Handler,
		},
		{
			MethodName: "DeleteBlob",
			Handler:    _Space_DeleteBlob_Handler,
		},
		{
			MethodName: "AddBlob",
			Handler:    _Space_AddBlob_Handler,
		},
		{
			MethodName: "ListBlob",
			Handler:    _Space_ListBlob_Handler,
		},
		{
			MethodName: "ReadCell",
			Handler:    _Space_ReadCell_Handler,
		},
		{
			MethodName: "CASCell",
			Handler:    _Space_CASCell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "got.proto",
}
